---
format: gfm
engine: knitr
title: "Advent of Code"
---

Welcome to my first advent of code attempt!

Main aim here is learning, trying things as a beginner in Rust and sharpening my R skills.
I also hope to try the challenges in different languages such as Python at some stage.

To check that the code is reproducible and to generate a few summary statistics for each solution, the README.md file is generated with the literate programming system [Quarto](https://quarto.org/).
This allows benchmarking of each solution using the [`hyperfine`](https://github.com/sharkdp/hyperfine) Rust crate and command line tool, plus information on the number of lines of code written to solve the problem in each attempt, with the [`cloc`](https://github.com/hrbrmstr/cloc) tool.

To reproduce the results take a look at the contents of [README.qmd](https://github.com/Robinlovelace/advent-of-code/blob/main/README.qmd) which contains all the code needed to reproduce the results by running code in the subfolders and run the benchmarks.

The whole point of this is learning and sharing so any comments/suggestions/other on these attempts very welcome.
Many thanks to Dustin Carlino who gave me some help on the Rust code, and to Andrea Gilardi whose [R solutions](https://github.com/agila5/aoc2022/) I part copied (and wholy copied to show how much faster their solution was than mine)!

```{r}
#| echo: false
#| message: false
knitr::opts_chunk$set(echo = FALSE, message = FALSE)
# Check to see if remotes package is installed:
if (!requireNamespace("remotes", quietly = TRUE)) {
  install.packages("remotes")
}
# Install packages we'll use with remotes:
remotes::install_cran("tidyverse")
remotes::install_github("hrbrmstr/cloc")
library(tidyverse)
```


```{r}
benchmark = function(directory = "rust/day01/") {
  wd = setwd(directory)
  if("Cargo.toml" %in% list.files()) {
    system("hyperfine --warmup 3 'cargo run' --export-csv benchmark.csv")
  }
  if(any(grepl(pattern = ".R", x = list.files()))) {
    system("hyperfine --warmup 3 'Rscript *.R' --export-csv benchmark.csv")
  }
  sys_time = read_csv("benchmark.csv")
  setwd(wd)
  sys_time = sys_time["mean"]
  names(sys_time) = "Benchmark (seconds)"
  sys_time
}
lines_of_code = function(directory = "rust/day01/") {
  unlink(file.path(directory, "target"), recursive = TRUE)
  loc = cloc::cloc(directory)
  loc_min = loc[c("file_count", "loc", "comment_lines")]
  names(loc_min) = c("N. code files", "Lines of code", "Lines of comments")
  tail(loc_min, n = 1)
}
loc_bench = function(directory = "rust/day01/") {
  bench = benchmark(directory)
  loc = lines_of_code(directory)
  cbind(directory = directory, bench, loc)
}
```


# Rust

```{r}
rust_directories = list.dirs(path = "rust/", full.names = TRUE, recursive = FALSE)
loc_rust = purrr::map_dfr(rust_directories, loc_bench)
loc_rust %>% 
  knitr::kable(digits = 3)
```

# R

```{r}
remotes::install_cran("here")
```

```{r}
r_directories = list.dirs(path = "R/", full.names = TRUE, recursive = FALSE)
loc_r = purrr::map_dfr(r_directories, loc_bench)
loc_r %>% 
  knitr::kable(digits = 3)
```

## Reproduce the results:

```{zsh}
#| echo: true
cd rust/day01
cargo run
```

```{bash}
#| echo: true
cd rust/day02
cargo run
```

```{bash}
#| echo: true
# cd rust/day03
```
